#lab 5
# 1. Analyze the relationship between the size of houses (measured in square footage) and their selling prices in a particular neighborhood. You have collected data on various houses in that neighborhood.Create a scatter plot using the below data and share your conclusion/analysis.

import matplotlib.pyplot as plt 
import numpy as np 
square_footage = np.array([1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800,
3000])
selling_prices = np.array([250, 290, 315, 380, 410, 450, 500, 525, 570, 610])
plt.plot(square_footage, selling_prices, marker='o', linestyle='', color='g')
plt.ylabel('Selling Price($000s)')
plt.xlabel('Square Footage (sq. ft.)')
plt.title('Housing Price vs Aquare Footage')
plt.show()

# 2. Create a pie chart to visualize the distribution of your monthly income by source. You have collected data on the various sources of your income, such as salary, freelance work, investments, and rental income. Share your conclusion/analysis.

import matplotlib.pyplot as plt
income_sources = ['Salary', 'Freelance', 'Investments', 'Rental', 'Other']
monthly_income = [5000, 1500, 1000, 600, 400]
plt.pie(monthly_income, labels=income_sources, autopct='%1.1f%%', startangle=140)
plt.title("Distribution of Monthly income by Source")
plt.show()

# 3. Create a pie chart to illustrate the distribution of a company's revenue across its various business segments. You have collected data on the revenue generated by each segment, such as Product A, Product B, Services, and Licensing. Share your conclusion/analysis.

import matplotlib.pyplot as plt
segments = ['Product A', 'Product B', 'Services', 'Licensing']
revenue_percentages = [45, 25, 15, 15]
plt.pie(revenue_percentages, labels=segments, autopct='%1.1f%%', startangle=140)
plt.show()

# 4. Suppose you're a sales manager for an e-commerce company, and you want to create a figure with subplots to compare the sales performance of different product categories over time. You have sales data for four product categories: Electronics, Clothing, Home & Garden, and Sports & Outdoors. Share your conclusion/analysis.

import matplotlib.pyplot as plt
import numpy as np
months = np.arange(1, 13)
electronics_sales = np.array([25000, 28000, 31000, 27000, 30000, 32000, 35000,
36000, 38000, 39000, 41000, 42000])
clothing_sales = np.array([15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000,
23000, 24000, 25000, 26000])
home_garden_sales = np.array([18000, 19000, 20000, 21000, 22000, 23000, 24000,
25000, 26000, 27000, 28000, 29000])
sports_outdoors_sales = np.array([12000, 13000, 14000, 15000, 16000, 17000, 18000,
19000, 20000, 21000, 22000, 23000])

plt.figure(figsize=(6,4))
plt.subplot(2,2,1)
plt.plot(months,electronics_sales,color = 'b',linestyle = '-',marker = 'o')
plt.title("Electronics")
plt.xlabel("Month")
plt.ylabel("Sales Amount")

plt.subplot(2,2,2)
plt.plot(months, clothing_sales, marker = 'o', color =  'g', linestyle = '-')
plt.title("Clothing")
plt.xlabel("Month")
plt.ylabel("Sales Amount")

plt.subplot(2,2,3)
plt.plot(months, home_garden_sales, marker = 'o', color =  'r', linestyle = '-')
plt.title("Home & Garden")
plt.xlabel("Month")
plt.ylabel("Sales Amount")

plt.subplot(2,2,4)
plt.plot(months, sports_outdoors_sales, marker = 'o', color =  'm', linestyle = '-')
plt.title("Sports & Outdoors")
plt.xlabel("Month")
plt.ylabel("Sales Amount")

plt.tight_layout()
plt.show()

# chatgpt Exercise
# Suppose you work for a retail company, and you have dummy data containing sales data for the past year. The data includes information such as SalesDate,product names,regions, sales quantities, prices, and dates. You have to generate a bar chart ,pie plot on region and prices and line chart on SalesDate and prices columns. Further, you need to get some inference out of the chart. Create a ChatGPT prompt to generate the code for this scenario. Based on the code generated, ask ChatGPT to give the conclusion/inference.
import pandas as pd
import matplotlib.pyplot as plt

file = 'mat_plot_Lab2.csv'
data = pd.read_csv(file)

plt.figure(figsize=(8,6))
plt.subplot(2,2,1)
region_price = data.groupby('Region')['Price'].sum()
region_price.plot(kind='bar', title='Total Price by Region')
plt.xticks(rotation= 45)
plt.xlabel('Region')
plt.ylabel('Total Price')

plt.subplot(2,2,2)
region_price.plot(kind='pie',autopct='%1.1f%%', title='Price Distribution by Region')
plt.ylabel("")

date_price = data.groupby('SalesDate')['Price'].sum()
plt.subplot(2,2,3)
date_price.plot(kind='line',marker='o',color =  'g')
plt.xticks(rotation = 45)

plt.tight_layout()
plt.show()

